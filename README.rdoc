= Software Design and Architecture Final Project
== Quiz App with AWS microservices

Authors::    Eduardo Roberto Müller Romero (A01745219), Sebastian Morales Martín (A01376228)
Date::      Jun 8, 2022

If you haven’t done so already, install the following gems. At the terminal type: (if your'e running it on a wsl you may need to use sudo)

    $ gem install hanna-nouveau
    $ gem install sinatra
    $ gem install faraday
    $ gem install aws-sdk-dynamodb
    $ gem install time

The directory structure for the application and its documentation is as follows:

    QuizApp/
          ├─ doc/                        Folder produced by RDoc.
          ├─ img/                        Folder for the documentation’s image files.
          └─ src/                        Folder for the application’s source code.
               ├─ public/                Folder for the server’s public documents.
               │       └─ stylesheets/   Folder for the application’s CSS files.
               ├─ models/                Folder for the application’s models.
               └─ views/                 Folder for the application’s views (ERB files).

The root of the documentation should now be available at: +QuizApp/doc/index.html+

Use any web browser to see the result.

=== Running the Application

To run the server type the following command at the terminal from the +taxEvation/src+ directory:

    $ ruby  server.rb

Afterwards, point your web browser the server’s root URL. Most likely it will be localhost:4567

=== 4+1 Architectural View Model

=== Logical View

Our Classes are defines bye the session that every user have every time he connects to our service, it saves all the necessary data and uses 
the lambda classes highscore, checkAnswers and questions to retrieve data from a dynamodb called highscores.
rdoc-image:img/logicalView.png
=== Process View

The process our web application will offer two possible starting options, see highscores and starting a quiz, this will ask for user, number of questions, will generate a list of 
questions, retrieve a question, answer a question, grade a question, ask another question. If there are no more questions it will show a grade and offer to upload your grade or not.

rdoc-image:img/processView.png


=== Development View

Our application is formed by 4 parts:

server.rb: is the principal ruby function.

models: it includes all the lambda functions
storage: the dynamodb table
public: all the graphical utilities.
vies: here we have all our view we use to navigate our application

rdoc-image:img/developmentView.png


=== Physical View

Our application is formed physically by 2 parts, the client pc and aws servers.
pc client: it only needs a web browser.
aws servers: it runs the web server, manages the storage and and necessary lambda functions.

rdoc-image:img/physicalView.png



=== Scenarios

Our application has 3 possible scenarios:
- see highscores: the user only wants to see the highscores
- answer quiz and upload grade: the user will answer the quiz and upload the grade.
- answer quiz and not upload grade: the user will answer the quiz and will not upload the grade.

rdoc-image:img/scenarios.png

=== Patterns Used
We used the following patters:
- <b>Domain-Specific Language</b>: The +server.rb+ file consists of a series of Sinatra routes. Sinatra is a DSL for creating web applications in Ruby.
- <b>Model-View-Controller</b>: The application follows the classical web implementation of the MVC architectural pattern. The models (+.rb+ files) and views (+.erb+ files) are stored in the corresponding +models+ but they are there only for 
documentation purposes but they are stored and executed in aws lambda, +views+ directory. The controller is contained in +server.rb+ file.

=== Acknowledments
BBBootstrap Team (templates used)
Fernando Silva (for mental health supporting)


=== References

- M. Fowler. UML Distilled: A Brief Guide to the Standard Object Modeling Language, 3rd Edition. Addison-Wesley, 2003.

- E. Gamma, R. Helm, R. Johnson, J. M. Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, 1994.
- R. Olsen. Design Patterns in Ruby. Addison-Wesley, 2007.
- Ruby-Doc.org. RDoc Markup Reference. http://ruby-doc.org/stdlib-3.0.0/libdoc/rdoc/rdoc/RDoc/Markup.html Accessed May 7, 2021.
- Ruby For Beginners. (2016). Sessions in Sinatra. 6/3/2021, de webapps-for-beginners Sitio web: https://webapps-for-beginners.rubymonstas.org/sessions/sinatra_sessions.html
- Bootstrap. (2021). Heroes · Bootstrap v5.0. 6/3/2021, de Bootstrap Sitio web: https://getbootstrap.com/docs/5.0/examples/heroes/